d1=subset(data,dose==1)
# So in the given dataset we have
# the response is the length of odontoblasts
# (cells responsible for tooth growth) in 60 guinea pigs.
# Each animal received one of three dose levels of vitamin
# C (0.5, 1, and 2 mg/day) by one of two delivery methods,
# (orange juice or ascorbic acid (a form of vitamin C and coded as VC).
# For more information on the dataset visit:
# https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/ToothGrowth.html
data(ToothGrowth)
require(ggplot2)
require(gridExtra)
data=ToothGrowth
data$dose=as.factor(data$dose)
suppbydose = interaction(data$supp,data$dose)
d1=subset(data,dose==1)
d0.5=subset(data,dose==.5)
d1=subset(data,dose==1)
d2=subset(data,dose==2)
doj0.5=subset(data,dose==.5&supp=="OJ")
doj1=subset(data,dose==1&supp=="OJ")
doj2=subset(data,dose==2&supp=="OJ")
dvc0.5=subset(data,dose==.5&supp=="VC")
dvc1=subset(data,dose==1&supp=="VC")
dvc2=subset(data,dose==2&supp=="VC")
dvc2
t.test(doj0.5$len,dvc0.5$len, conf.level=0.95,paired=FALSE)
t.test(doj0.5$len,dvc0.5$len, conf.level=0.95,paired=TRUE)
t.test(doj0.5$len,dvc0.5$len, conf.level=0.95)
nrow(doj0.5)
nrow(dvc0.5)
nrow(data)
data
?t.test
t.test(doj0.5$len,dvc0.5$len, conf.level=0.95)
getwd()
set.seed(15)
simulation = replicate(3000,mean(rexp(40,1/5)))
means = mean(simulation)
means
hist(simulation, col="red", main = "Theoretical vs Sample Mean")
abline(v=means,col="blue",lwd=4,lty=4)
abline(v=5,col="black",lwd=4,lty=5)
legend("topright",c("Theoretical mean","Sample mean"),lty=c(5,4),lwd=c(4,4),col = c("black","blue"))
set.seed(15)
simulation = replicate(3000,mean(rexp(40,1/5)))
means = mean(simulation)
means
hist(simulation, col="red", main = "Theoretical vs Sample Mean")
abline(v=means,col="blue",lwd=4,lty=4)
abline(v=5,col="black",lwd=4,lty=5)
legend("topright",c("Theoretical mean","Sample mean"),lty=c(5,4),lwd=c(4,4),col = c("black","blue"))
hist(simulation, col="red", main = "Theoretical vs Sample Mean")
set.seed(15)
simulation = replicate(3000,mean(rexp(40,1/5)))
hist(simulation, col="red", main = "Theoretical vs Sample Mean")
abline(v=means,col="blue",lwd=4,lty=4)
abline(v=5,col="black",lwd=4,lty=5)
legend("topright",c("Theoretical mean","Sample mean"),lty=c(5,4),lwd=c(4,4),col = c("black","blue"))
set.seed(15)
simulation = replicate(3000,mean(rexp(40,1/5)))
means = mean(simulation)
means
hist(simulation, col="red", main = "Theoretical vs Sample Mean")
abline(v=means,col="blue",lwd=4,lty=4)
abline(v=5,col="black",lwd=4,lty=5)
legend("topright",c("Theoretical mean","Sample mean"),lty=c(5,4),lwd=c(4,4),col = c("black","blue"))
hist(simulation, col="red", main = "Theoretical vs Sample Mean")
abline(v=means,col="blue",lwd=4,lty=4)
abline(v=5,col="black",lwd=4,lty=5)
legend("topright",c("Theoretical mean","Sample mean"),lty=c(5,4),lwd=c(4,4),col = c("black","blue"),cex = 0.75)
hist(simulation, col="", main = "Theoretical vs Sample Mean")
abline(v=means,col="blue",lwd=4,lty=4)
abline(v=5,col="black",lwd=4,lty=5)
legend("topright",c("Theoretical mean","Sample mean"),lty=c(5,4),lwd=c(4,4),col = c(5,3),cex = 0.75)
hist(simulation, col="red", main = "Theoretical vs Sample Mean")
abline(v=means,col="blue",lwd=4,lty=4)
abline(v=5,col="black",lwd=4,lty=5)
legend("topright",c("Theoretical mean","Sample mean"),lty=c(5,4),lwd=c(4,4),col = c(5,3),cex = 0.75)
hist(simulation, col="red", main = "Theoretical vs Sample Mean")
abline(v=means,col=5,lwd=4,lty=4)
abline(v=5,col=3,lwd=4,lty=5)
legend("topright",c("Theoretical mean","Sample mean"),lty=c(5,4),lwd=c(4,4),col = c(5,3),cex = 0.75)
hist(simulation, col="red", main = "Theoretical vs Sample Mean")
abline(v=means,col="blue",lwd=4,lty=4)
abline(v=5,col="black",lwd=4,lty=5)
legend("topright",c("Theoretical mean","Sample mean"),lty=c(5,4),lwd=c(4,4),col = c("black","blue"))
hist(simulation, col="red", main = "Theoretical vs Sample Mean")
abline(v=means,col="blue",lwd=4,lty=4)
abline(v=5,col="black",lwd=4,lty=5)
legend("topright",c("Theoretical mean","Sample mean"),lty=c(5,4),lwd=c(4,4),col = c("black","blue")cex = 0.75)
hist(simulation, col="red", main = "Theoretical vs Sample Mean")
abline(v=means,col="blue",lwd=4,lty=4)
abline(v=5,col="black",lwd=4,lty=5)
legend("topright",c("Theoretical mean","Sample mean"),lty=c(5,4),lwd=c(4,4),col = c("black","blue"),cex = 0.75)
require(ggplot2)
require(gridExtra)
sim1 = rexp(4000,1/5)
sim2 = replicate(4000,mean(rexp(40,1/5)))
df1 = data.frame(X = sim1)
df2 = data.frame(X = sim2)
p1 = ggplot(df1, aes(x = X)) + geom_histogram(aes(y = ..density..), fill = "red") + geom_density(size = 1,adjust=3)
p1
p2 = ggplot(df2, aes(x = X)) + geom_histogram(aes(y = ..density..), fill = "red") + geom_vline(xintercept = 5, size = 2) + geom_density(size=1,adjust=2)
p2
data(ToothGrowth)
require(ggplot2)
require(gridExtra)
data=ToothGrowth
data$dose=as.factor(data$dose)
suppbydose = interaction(data$supp,data$dose)
p1 = ggplot(data,aes(y=len, x=supp, fill=supp))+geom_boxplot()+ guides(fill=guide_legend(title="Supplement"))
p1 = p1 + labs(x = "Supplement",y = "Length")
p1 = p1 + ggtitle("Tooth growth with different supplements")
p2 = ggplot(data,aes(y=len, x=dose, fill=dose))+geom_boxplot()+ guides(fill=guide_legend(title="Dose"))
p2 = p2 + labs(x = "Dose",y = "Length")
p2 = p2 + ggtitle("Tooth growth with different doses")
p3 = ggplot(data,aes(y=len, x=suppbydose, fill=suppbydose))+geom_boxplot()+ guides(fill=guide_legend(title="Supplement by Dose"))
p3 = p3 + labs(x = "Supplement by Dose",y = "Length")
p3 = p3 + ggtitle("Tooth growth with different supplements and doses")
p1
data(ToothGrowth)
require(ggplot2)
require(gridExtra)
data=ToothGrowth
data$dose=as.factor(data$dose)
suppbydose = interaction(data$supp,data$dose)
p1 = ggplot(data,aes(y=len, x=supp, fill=supp))+geom_boxplot()+ guides(fill=guide_legend(title="Supplement"))
p1 = p1 + labs(x = "Supplement",y = "Length")
p1 = p1 + ggtitle("Tooth growth with different supplements")
p1
grid.arrange(p1, p2, p3, ncol = 2)
data(ToothGrowth)
require(ggplot2)
require(gridExtra)
data=ToothGrowth
data$dose=as.factor(data$dose)
suppbydose = interaction(data$supp,data$dose)
p1 = ggplot(data,aes(y=len, x=supp, fill=supp))+geom_boxplot()+ guides(fill=guide_legend(title="Supplement"))
p1 = p1 + labs(x = "Supplement",y = "Length")
p1 = p1 + ggtitle("Tooth growth with different supplements")
p2 = ggplot(data,aes(y=len, x=dose, fill=dose))+geom_boxplot()+ guides(fill=guide_legend(title="Dose"))
p2 = p2 + labs(x = "Dose",y = "Length")
p2 = p2 + ggtitle("Tooth growth with different doses")
p3 = ggplot(data,aes(y=len, x=suppbydose, fill=suppbydose))+geom_boxplot()+ guides(fill=guide_legend(title="Supplement by Dose"))
p3 = p3 + labs(x = "Supplement by Dose",y = "Length")
p3 = p3 + ggtitle("Tooth growth with different supplements and doses")
# Loads all 3 plot but load them individually if you want
# better quality
grid.arrange(p1, p2, p3, ncol = 2)
data(ToothGrowth)
require(ggplot2)
require(gridExtra)
data=ToothGrowth
data$dose=as.factor(data$dose)
suppbydose = interaction(data$supp,data$dose)
p1 = ggplot(data,aes(y=len, x=supp, fill=supp))+geom_boxplot()+ guides(fill=guide_legend(title="Supplement"))
p1 = p1 + labs(x = "Supplement",y = "Length")
p1 = p1 + ggtitle("Tooth growth with different supplements")
p1
summary(data)
p2
p2 = ggplot(data,aes(y=len, x=dose, fill=dose))+geom_boxplot()+ guides(fill=guide_legend(title="Dose"))
p2 = p2 + labs(x = "Dose",y = "Length")
p2 = p2 + ggtitle("Tooth growth with different doses")
p2
p3 = ggplot(data,aes(y=len, x=suppbydose, fill=suppbydose))+geom_boxplot()+ guides(fill=guide_legend(title="Supplement by Dose"))
p3 = p3 + labs(x = "Supplement by Dose",y = "Length")
p3 = p3 + ggtitle("Tooth growth with different supplements and doses")
p3
# Supplement type OJ and Dose level 0.5
doj0.5=subset(data,dose==.5 & supp=="OJ")
# Supplement type OJ and Dose level 1
doj1=subset(data,dose==1 & supp=="OJ")
# Supplement type OJ and Dose level 2
doj2=subset(data,dose==2 & supp=="OJ")
# Supplement type VC and Dose level 0.5
dvc0.5=subset(data,dose==.5 & supp=="VC")
# Supplement type VC and Dose level 1
dvc1=subset(data,dose==1 & supp=="VC")
# Supplement type vC and Dose level 2
dvc2=subset(data,dose==2 & supp=="VC")
# Test 1: Is there any statistically significant difference
# in growth between the two supplements with dose level 0.5
t.test(doj0.5$len,dvc0.5$len, conf.level=0.95)
# Test 2: Is there any statistically significant difference
# in growth between the two supplements with dose level 1
t.test(doj1$len,dvc1$len, conf.level=0.95)
# Test 3: Is there any statistically significant difference
# in growth between the two supplements with dose level 2
t.test(doj2$len,dvc2$len, conf.level=0.95)
# Test 4: Is there any statistically significant difference
# in growth between dose levels 0.5 and 1 for the supplement OJ
t.test(doj0.5$len,doj1$len, conf.level=0.95)
# Test 5: Is there any statistically significant difference
# in growth between dose levels 1 and 2 for the supplement OJ
t.test(doj1$len,doj2$len, conf.level=0.95)
# Test 6: Is there any statistically significant difference
# in growth between dose levels 0.5 and 1 for the supplement VC
t.test(dvc0.5$len,dvc1$len, conf.level=0.95)
# Test 7: Is there any statistically significant difference
# in growth between dose levels 1 and 2 for the supplement VC
t.test(dvc1$len,dvc2$len, conf.level=0.95)
setwd("E:/Desktop/RepData_PeerAssessment1")
data=read.csv("activity.csv")
data$date = as.Date(data$date, "%Y-%m-%d")
cleaned_data=na.omit(data)
library(ggplot2)
library(scales)
total_step_num = aggregate(steps ~ date, data=cleaned_data, sum)
total_step_num$date = as.Date(total_step_num$date, "%Y-%m-%d")
total_step_num = total_step_num[order(as.Date(total_step_num$date,format="%d-%m-%Y")),,drop=FALSE]
ggplot(total_step_num, aes(y=steps, x=date)) + geom_histogram(stat="identity",fill="blue") + theme(axis.text.x = element_text(size=8,angle = 45, vjust=1,hjust=1))+scale_x_date(breaks = "5 days", labels=date_format("%Y-%m-%d"))
total_step_num$date=format(total_step_num$date,"%d-%m-%Y")
total_step_num
mean(total_step_num$steps)
median(total_step_num$steps)
average_steps = aggregate(steps ~ interval,mean,data=cleaned_data)
ggplot(average_steps, aes(y=steps, x=interval)) + geom_line(col="blue") + ylab("Average Steps Taken per Interval") + xlab("Intervals")
head(average_steps[order(average_steps$steps, decreasing = TRUE),])
missing_values = subset(data,is.na(steps))
nrow(missing_values)
averaged_steps = aggregate(steps ~ interval, mean, data = cleaned_data)
filled_data = data
for(i in 1:nrow(data)){
if(is.na(data[i,1])){
filled_data[i,1] = subset(averaged_steps,interval==data[i,3])[,2]
}
}
total_step_num_filled = aggregate(steps ~ date, data=filled_data, sum)
total_step_num_filled$date = as.Date(total_step_num_filled$date, "%Y-%m-%d")
total_step_num_filled = total_step_num_filled[order(as.Date(total_step_num_filled$date,format="%d-%m-%Y")),,drop=FALSE]
ggplot(total_step_num_filled, aes(y=steps, x=date)) + geom_histogram(stat="identity",fill="blue") + theme(axis.text.x = element_text(size=8,angle = 45, vjust=1,hjust=1))+scale_x_date(breaks = "5 days", labels=date_format("%Y-%m-%d"))
total_step_num_filled$date=format(total_step_num_filled$date,"%d-%m-%Y")
total_step_num_filled
mean(total_step_num_filled$steps)
median(total_step_num_filled$steps)
filled_data$weekday="Weekday"
for(i in 1:nrow(filled_data)){
if(weekdays(filled_data[i,2])=="Saturday"||weekdays(filled_data[i,2])=="Sunday"){
filled_data[i,4] = "Weekend"
}
}
filled_data$weekday = as.factor(filled_data$weekday)
weekday=aggregate(steps ~ interval,mean,data=subset(filled_data,weekday=="Weekday"))
weekend=aggregate(steps ~ interval,mean,data=subset(filled_data,weekday=="Weekend"))
weekday$weekday="Weekday"
weekend$weekday="Weekend"
full_week = rbind(weekday,weekend)
full_week$weekday=as.factor(full_week$weekday)
ggplot(full_week, aes(y=steps, x=interval, fill = weekday)) + geom_line(col="blue") + ylab("Average Steps Taken per Interval") + xlab("Intervals") + facet_wrap(~ weekday,ncol=1) + theme(strip.background = element_rect(fill="orange"))
weekday=aggregate(steps ~ interval,mean,data=subset(filled_data,weekday=="Weekday"))
weekend=aggregate(steps ~ interval,mean,data=subset(filled_data,weekday=="Weekend"))
subset(filled_data,weekday=="Weekend")
filled_data$weekday="Weekday"
for(i in 1:nrow(filled_data)){
if(weekdays(filled_data[i,2])=="Saturday"||weekdays(filled_data[i,2])=="Sunday"){
filled_data[i,4] = "Weekend"
}
}
filled_data$weekday = as.factor(filled_data$weekday)
weekday=aggregate(steps ~ interval,mean,data=subset(filled_data,weekday=="Weekday"))
weekend=aggregate(steps ~ interval,mean,data=subset(filled_data,weekday=="Weekend"))
weekday$weekday="Weekday"
weekend$weekday="Weekend"
data=read.csv("activity.csv")
data$date = as.Date(data$date, "%Y-%m-%d")
cleaned_data=na.omit(data)
averaged_steps = aggregate(steps ~ interval, mean, data = cleaned_data)
filled_data = data
for(i in 1:nrow(data)){
if(is.na(data[i,1])){
filled_data[i,1] = subset(averaged_steps,interval==data[i,3])[,2]
}
}
filled_data$weekday="Weekday"
for(i in 1:nrow(filled_data)){
if(weekdays(filled_data[i,2])=="Saturday"||weekdays(filled_data[i,2])=="Sunday"){
filled_data[i,4] = "Weekend"
}
}
filled_data$weekday = as.factor(filled_data$weekday)
weekday=aggregate(steps ~ interval,mean,data=subset(filled_data,weekday=="Weekday"))
weekend=aggregate(steps ~ interval,mean,data=subset(filled_data,weekday=="Weekend"))
weekday$weekday="Weekday"
weekend$weekday="Weekend"
full_week = rbind(weekday,weekend)
full_week$weekday=as.factor(full_week$weekday)
ggplot(full_week, aes(y=steps, x=interval, fill = weekday)) + geom_line(col="blue") + ylab("Average Steps Taken per Interval") + xlab("Intervals") + facet_wrap(~ weekday,ncol=1) + theme(strip.background = element_rect(fill="orange"))
filled_data$weekday = as.factor(filled_data$weekday)
levels(data$weekday)
levels(filled_data$weekday)
filled_data$weekday="Weekday"
for(i in 1:nrow(filled_data)){
if(weekdays(filled_data[i,2])=="Saturday"||weekdays(filled_data[i,2])=="Sunday"){
filled_data[i,4] = "Weekend"
}
}
subset(filled_data,weekday=="Weekend")
filled_data
if(weekdays(filled_data[1,2])=="Saturday"||weekdays(filled_data[1,2])=="Sunday"){
filled_data[1,4] = "Weekend"
}
filled_data[1,4]
filled_data[1,2]
nrow(filled_data)
if(weekdays(filled_data[17568,2])=="Saturday"||weekdays(filled_data[17568,2])=="Sunday"){
filled_data[17568,4] = "Weekend"
}
filled_data[17568,2]
filled_data[17568,4]
for(i in 1:nrow(filled_data)){
print(i)
if(weekdays(filled_data[i,2])=="Saturday"||weekdays(filled_data[i,2])=="Sunday"){
filled_data[i,4] = "Weekend"
}
}
filled_data$weekday
class(filled_data$date)
weekdays(filled_data$date)
Sys.setlocale("LC_ALL","English")
Sys.setlocale("LC_ALL","English")
data=read.csv("activity.csv")
data$date = as.Date(data$date, "%Y-%m-%d")
cleaned_data=na.omit(data)
filled_data = data
for(i in 1:nrow(data)){
if(is.na(data[i,1])){
filled_data[i,1] = subset(averaged_steps,interval==data[i,3])[,2]
}
}
total_step_num_filled = aggregate(steps ~ date, data=filled_data, sum)
total_step_num_filled$date = as.Date(total_step_num_filled$date, "%Y-%m-%d")
total_step_num_filled = total_step_num_filled[order(as.Date(total_step_num_filled$date,format="%d-%m-%Y")),,drop=FALSE]
ggplot(total_step_num_filled, aes(y=steps, x=date)) + geom_histogram(stat="identity",fill="blue") + theme(axis.text.x = element_text(size=8,angle = 45, vjust=1,hjust=1))+scale_x_date(breaks = "5 days", labels=date_format("%Y-%m-%d"))
total_step_num_filled$date=format(total_step_num_filled$date,"%d-%m-%Y")
total_step_num_filled
mean(total_step_num_filled$steps)
median(total_step_num_filled$steps)
filled_data$weekday="Weekday"
for(i in 1:nrow(filled_data)){
if(weekdays(filled_data[i,2])=="Saturday"||weekdays(filled_data[i,2])=="Sunday"){
filled_data[i,4] = "Weekend"
}
}
filled_data$weekday = as.factor(filled_data$weekday)
weekday=aggregate(steps ~ interval,mean,data=subset(filled_data,weekday=="Weekday"))
weekend=aggregate(steps ~ interval,mean,data=subset(filled_data,weekday=="Weekend"))
weekday$weekday="Weekday"
weekend$weekday="Weekend"
full_week = rbind(weekday,weekend)
full_week$weekday=as.factor(full_week$weekday)
ggplot(full_week, aes(y=steps, x=interval, fill = weekday)) + geom_line(col="blue") + ylab("Average Steps Taken per Interval") + xlab("Intervals") + facet_wrap(~ weekday,ncol=1) + theme(strip.background = element_rect(fill="orange"))
knit2html("PA1_template.Rmd")
library(knitr)
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
